* Start as daemon
[[https://www.emacswiki.org/emacs/EmacsAsDaemon][Wiki: Emacs as daemon]]
** Add service
~~/.config/systemd/user/emacs.service~
#+begin_src bash
  [Unit]
  Description=Emacs text editor
  Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

  [Service]
  Type=forking
  ExecStart=/usr/bin/emacs --daemon
  ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
  Environment=SSH_AUTH_SOCK=%t/keyring/ssh
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src
** Enable the unit
#+begin_src bash
  systemctl enable --user emacs
  systemctl start --user emacs
#+end_src
* UI
** Toolbars
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode t)
#+end_src
** Show lines and columns
#+begin_src emacs-lisp
  ;; show current line number in the bottom
  (line-number-mode 1)
  ;; show current column in the bottom
  (column-number-mode 1)
  ;; display lines across all files
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
#+end_src
** Cursor
#+begin_src emacs-lisp
  (global-hl-line-mode t)

  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  ;; Hide startup message and show instead dashboard
  (setq inhibit-startup-message t)

  (use-package dashboard
    :ensure t
    :init
    :config
    (dashboard-setup-startup-hook))

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

  (setq dashboard-set-navigator t)

   ;; Set the title
   ;;(setq dashboard-banner-logo-title (format-time-string "%Y-%m-%d"))

  ;; Set the banner
  (setq dashboard-startup-banner 'official)
  ;; Value can be
  ;; 'official which displays the official emacs logo
  ;; 'logo which displays an alternative emacs logo
  ;; 1, 2 or 3 which displays one of the text banners
  ;; "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer

  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)

  ;; To disable shortcut "jump" indicators for each section, set
  ;;(setq dashboard-show-shortcuts nil)


  (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)

  (setq dashboard-items '((recents  . 5)
			  (projects . 5)))
#+end_src
** Generic
#+begin_src emacs-lisp
  ;; Dedicated autosaved directory
  (setq backup-directory-alist
	`(("." . ,(concat user-emacs-directory "backups"))))

  (defalias 'yes-or-no-p 'y-or-n-p)

  (global-prettify-symbols-mode t)

  (add-hook 'window-setup-hook 'toggle-frame-maximized t)

  (use-package minimap
    :ensure t
    :config
    (setq minimap-window-location "right")
    (setq minimap-major-modes '(prog-mode org-mode)))

  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

#+end_src

** Transpose frame

#+begin_src emacs-lisp
  (use-package transpose-frame
	:ensure t)
#+end_src
* Text manipulation

#+begin_src emacs-lisp
  (defun pps/show-unique-words (&optional alphabetical)
    "Collect all of the unique words in the current buffer and
  display them in a new buffer.  With prefix, alphabetize the
  list."
    (interactive "P")
    (let ((buf (buffer-name))
	  (new (get-buffer-create "*Unique Words*"))
	  (txt (delete-dups (mapcar #'downcase
				    (split-string (buffer-string)
						  nil nil
						  "[^[:alnum:]]+")))))
      (with-current-buffer new
	(delete-region (point-min) (point-max))
	(insert (format "%d unique words in the <%s> buffer:\n\n"
			(length txt) buf))
	(cl-dolist (word (if alphabetical (sort txt #'string<) txt))
	  (insert (concat word "\n"))))
      (pop-to-buffer new)))

#+end_src
** Use Emacs everywhere
[[https://github.com/tecosaur/emacs-everywhere][Instructions on GitHub page]]
Allow editing stuff from system wide input fields
*** Ensure you have the following dependencies satisfied: xclip, xdotool, xprop, and xwininfo.
*** Add custom global shortcut to the system: emacsclient --eval "(emacs-everywhere)"
#+begin_src emacs-lisp
    (use-package emacs-everywhere
      :ensure t)
#+end_src
*** Emacs keybinds in other applications
**** Set Emacs Key themme in gtk2
***** Edit '~/.gtkrc-2.0' and add up top:
#+begin_src xml
  ##### Add Emacs keybindings
  # https://forum.kde.org/viewtopic.php?t=123695
  gtk-key-theme-name="Emacs"
  #
  # Override/tweak the Emacs theme with my settings below.
  #
  binding "gtk-emacs-override"
  {
     unbind "<ctrl>b"
     unbind "<ctrl>i"
     unbind "<ctrl>u"
  }
  class "*" binding "gtk-emacs-override"
  ######
#+end_src
**** [[https://shallowsky.com/blog/linux/gtk3-emacs-key-theme.html][Set Emacs key theme in gtk3]]
***** edit '~/.config/gtk-3.0/settings.ini' and add, inside the [Settings] section, this line:
#+begin_src xml
gtk-key-theme-name = Emacs
#+end_src
***** Set gsetttings:
#+begin_src bash
  gsettings set org.gnome.desktop.interface gtk-key-theme "Emacs"
#+end_src
** Subword
Use =M-b= and =M-f= to navigate, not only between words,
but when present between **subWords**
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src
** Copy whole word
No need to have a function to kill the whole word I find that M-f M-del suffices
#+begin_src emacs-lisp
  (defun pps/copy-whole-word (&optional subword)
    (interactive)
    (save-excursion
      (forward-char 1)
      (if (equal subword 1)
	  (global-subword-mode 0))
      (backward-word)
      (kill-word 1)
      (if (equal subword 1)
	  (global-subword-mode 1))
      (yank))
    (if (equal subword 1)
	(message "SubWord copied")
      (message "Whole word copied")))
  (global-set-key (kbd "C-c w") 'pps/copy-whole-word)
  (global-set-key (kbd "C-c C-w") (lambda () (interactive) (pps/copy-whole-word 1)))
#+end_src
** Copy whole line
[[https://www.emacswiki.org/emacs/CopyingWholeLines][wiki: Copy whole lines]]
#+begin_src emacs-lisp
  (defun pps/copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring"
    (interactive "p")
    (kill-ring-save (line-beginning-position)
		    (line-beginning-position (+ 1 arg)))
    (message "%d line%s copied" arg (if (= 1 arg) "" "s")))

  (global-set-key "\C-c\C-k" 'pps/copy-line)
#+end_src
* Config edit/reload
** Edit
#+begin_src emacs-lisp
  (defun pps/config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'pps/config-visit)
#+end_src
** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* Org
** Structure Template
Reset existent **org-structure-template-alist** variable
to add additional ~src emacs-lisp~ and have =s= trigger that
instead of triggering =src= (=src= gets now assigned to =S=)
More info: =C-h v= and type ~org-structure-template-alist~ =RET=
#+begin_src emacs-lisp
  (setq org-structure-template-alist
      '(("a" . "export ascii")
	("c" . "center")
	("C" . "comment")
	("e" . "example")
	("E" . "export")
	("h" . "export html")
	("l" . "export latex")
	("q" . "quote")
	("S" . "src")
	("s" . "src emacs-lisp")
	("v" . "verse")))
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

* IDO
** Enable ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** Make ido vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** Using IDO for buffers see "Buffers"
** SMEX
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
* Buffers
** Create scractch buffer
[[https://www.emacswiki.org/emacs/RecreateScratchBuffer][wiki: Recreate Scractch buffer]]
#+begin_src emacs-lisp
  (defun create-scratch-buffer nil
     "create a scratch buffer"
     (interactive)
     (switch-to-buffer (get-buffer-create "*scratch*"))
     (lisp-interaction-mode))
#+end_src
** Kill buffers
[[https://www.youtube.com/watch?v=crDdqZWgZw8&t=227s][Emacs Tutorial 11 - Fixing Emacs Part 2 @4m30]]
Kill the current buffer **without** confirmation:
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+end_src
** Enable iBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src
** Switch buffer with IDO
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src

* Windows
** Switch-window
to do
** Open buffer in
#+begin_src emacs-lisp
  (use-package window
    :custom
    (display-buffer-alist
     '(("\\*e?shell\\*"
	(display-buffer-in-side-window)
	(window-height . 0.25)
	(side . bottom)
	;; negative to the left; 0 center; positive to the right
	(slot . -1))
       ("\\*\\(Backtrace\\|Warnings\\|Compile-log\\|[Hh]elp\\|Messages\\)\\*"
	(display-buffer-in-side-window)
	(window-height . 0.25)
	(side . bottom)
	(slot . -0))))
    :bind (("s-n" . next-buffer)
	   ("s-p" . previous-buffer)
	   ("s-o" . other-window)
	   ("s-2" . split-window-bellow)
	   ("s-3" . split-window-right)
	   ("s-k" . delete-window)
	   ("s-1" . delete-other-windows)
	   ("s-5" . delete-frame)
	   ("<f8>" . window-toggle-side-windows)))
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

* Development
** Generic
#+begin_src emacs-lisp
   ;; Auto-closing pairs
   (electric-pair-mode 1)

  ;; WARNING: This will change your life
  ;; (OPTIONAL) Visualize tabs as a pipe character - "|"
  ;; This will also show trailing characters as they are useful to spot.
  (setq whitespace-style '(face tabs tab-mark trailing))

  ;; delete trailing whitespace before save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+end_src
** Tabs and Spaces
#+begin_src emacs-lisp
  (global-whitespace-mode) ; Enable whitespace mode everywhere

  ;; Our Custom Variable
  (setq custom-tab-width 4)

  (defun disable-tabs () (setq indent-tabs-mode nil))
  (defun enable-tabs  ()
    (local-set-key (kbd "TAB") 'tab-to-tab-stop)
    (setq indent-tabs-mode t)
    (setq tab-width custom-tab-width))

  ;; Language-Specific Tweaks
  (add-hook 'prog-mode-hook 'enable-tabs)
  (add-hook 'lisp-mode-hook 'disable-tabs)
  (add-hook 'emacs-lisp-mode-hook 'disable-tabs)

  ;; Making electric-indent behave sanely
  (setq-default electric-indent-inhibit t)

  ;; Make the backspace properly erase the tab instead of
  ;; removing 1 space at a time.
  (setq backward-delete-char-untabify-method 'hungry)
#+end_src
*** Shift tabulation in selected region
[[https://www.emacswiki.org/emacs/IndentingText][wiki: Indenting Text]]
#+begin_src emacs-lisp
  ;; Shift the selected region right if distance is postive, left if
  ;; negative
  (defun shift-region (distance)
    (let ((mark (mark)))
      (save-excursion
	(indent-rigidly (region-beginning) (region-end) distance)
	(push-mark mark t t)
	;; Tell the command loop not to deactivate the mark
	;; for transient mark mode
	(setq deactivate-mark nil))))

  (defun shift-right ()
    (interactive)
    (shift-region 1))

  (defun shift-left ()
    (interactive)
    (shift-region -1))

  ;; Bind (shift-right) and (shift-left) function to your favorite keys. I use
  ;; the following so that Ctrl-Shift-Right Arrow moves selected text one
  ;; column to the right, Ctrl-Shift-Left Arrow moves selected text one
  ;; column to the left:

  (global-set-key [C-S-right] 'shift-right)
  (global-set-key [C-S-left] 'shift-left)
#+end_src
** Languages

*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    ;; :hook (lsp-mode . efs/lsp-mode-setup)
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (prog-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))


#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :ensure t
    :after lsp)

#+end_src

*** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :ensure t
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** Bash
Install this to use LSP in shell scripts
#+begin_src shell :tangle no
npm install -g bash-language-server
#+end_src

** Flycheck
LSP current breaks Flycheck's "next-checker" feature. Flycheck is able to
daisy-chain multiple syntax checkers, running one after the other. You can run
src_emacs-lisp[:export code]{(flycheck-verify-setup)} and have a look at each
entry's "next checkers." However, the checker supplied by LSP, =lsp=, runs in
many different modes and doesn't have any "next checkers." Flycheck wasn't
designed to allow a single checker to have different "next checkers" depending
on the mode of the current buffer. From [[https://github.com/sangster/emacs/blob/master/README.org#flycheck-integration][here]].

See [[https://github.com/flycheck/flycheck/issues/1762][flycheck issue #1762: "Correct way to chain checkers to lsp"]].

To implement the hack-fix, from the above link, we need to set LSP's
"next-checker" in the new =flycheck-local-checkers= variable in a hook for each
mode, like:
#+begin_src emacs-lisp
  (defvar-local flycheck-local-checkers nil
    "Buffer-local Flycheck checkers.")

  (defun js:advice-around:flycheck-checker-get(fn checker property)
    (or (alist-get property (alist-get checker flycheck-local-checkers))
	(funcall fn checker property)))

  (advice-add 'flycheck-checker-get
	      :around #'js:advice-around:flycheck-checker-get)

  (defun js:flycheck:lsp:next-checkers (checkers)
    "Set CHECKERS as the LSP checker's next-checkers in the local buffer."
    (setq flycheck-local-checkers `((lsp . ((next-checkers . ,checkers))))))
#+end_src
*** CSS
#+begin_src emacs-lisp
  (add-hook
   'css-mode-hook
   (lambda ()
     (js:flycheck:lsp:next-checkers '(css-stylelint))
     (setq flycheck-stylelintrc
	   (locate-user-emacs-file "../.stylelintrc.json"))))
#+end_src
** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
	   ("<tab>" . company-complete-selection))
	  (:map lsp-mode-map
	   ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/LibreOffice")
      (setq projectile-project-search-path '("~/LibreOffice")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode))

#+end_src

** Commenting
From [[https://www.emacswiki.org/emacs/CommentingCode][wiki: Commenting Code]] but with my own key combination
#+begin_src emacs-lisp
  ;; Original idea from
  ;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
  (defun comment-dwim-line (&optional arg)
    "Replacement for the comment-dwim command.
    If no region is selected and current line is not blank and we are not at the end of the line,
    then comment current line.
    Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
      (interactive "*P")
      (comment-normalize-vars)
      (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
	  (comment-or-uncomment-region (line-beginning-position) (line-end-position))
	(comment-dwim arg)))

  (global-set-key "\M-/" 'comment-dwim-line)
#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
** Magit
*** Magit setup
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :init
    :bind (("C-x g" . magit-status)))
#+end_src
*** Use spell checker
#+begin_src emacs-lisp
  (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
#+end_src
